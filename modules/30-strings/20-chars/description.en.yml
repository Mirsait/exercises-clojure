---

name: Символы
theory: |
  Помимо построковой обработки, в Clojure, конечно же, есть и посимвольная обработка.

  ```clojure
  (seq (char-array "asdf")) ; (\a \s \d \f)

  (char 97)                 ; \a

  (map char [65 66 67 68])  ; (\A \B \C \D)


  (apply str
    (map char [67 108 111 106 117 114 101]))
  ; "Clojure"

  (seq "abc") ; (\a \b \c)
  ```

  Важно отметить, что не все функции, которые работают со строками, поддерживают работу с символами. Так же, напрямую вызывать на строке функции `map`, `filter`, `reduce` тоже не получится, поэтому необходимо предварительно подготовить обрабатываемые строки, например, с помощью функции `seq` или `clojure.string/split`.

instructions: |
  Реализуйте функцию `next-chars`, которая создаёт новую строку на основе строки-аргумента таким образом, что каждый символ новой строки является "следующим" (с точки зрения кода) по отношению к соответствующему символу исходной строки.
  Примеры:

  ```clojure
  (next-chars "")      ; ""
  (next-chars "abc")   ; "bcd"
  (next-chars "12345") ; "23456"
  ```

tips: []
