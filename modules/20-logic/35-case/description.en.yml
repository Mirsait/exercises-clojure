---

name: Case
theory: |
  Вместо `switch` в Clojure ипользуется `case`. В общем случае `case` по своим возможностям шире, чем `switch` в большинстве языков программирования. Его использование в качестве `switch`, это наиболее простой способ познакомиться с ним:

  ```clojure
  (let [v 0]
    (case v
      0 "zero"
      1 "one"
      2 "two"))
  ; "zero"
  ```
  Каждая ветка в `case` описывается значением и тем, что вернется из выражения, если же ни один из случаев не подошел, то записывается только возвращаемое выражение. Например:

  ```clojure
  (case 6
    0 "zero"
    1 "one"
    2 "two"
    "many")
  ; "many"
  ```
instructions: |
  Реализуйте функцию `humanize-permission`, которая принимает на вход символьное обозначение прав доступа в Unix системах, и возвращает текстовое описание.

  ```clojure
  (humanize-permission "x") ; execute
  (humanize-permission "r") ; read
  (humanize-permission "w") ; write
  ```
tips: []
