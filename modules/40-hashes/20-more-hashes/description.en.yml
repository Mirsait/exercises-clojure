---

name: Еще немного о хешах
theory: |
  В Clojure с помощью хеш-мап очень легко задать полиморфное поведение (есть еще специальный механизм `defmulti` о нем чуть позже). К тому же, имеется богатая библиотека по обработке коллекций. Рассмотрим еще несколько примеров:

  ```clojure
  ; Создадим простой калькулятор с помощью хеш-мапы
  (defn calc [first-num second-num operation]
    (let [operations-map {"+" +
                          "-" -
                          "*" *
                          "^" (fn [a b] (int (Math/pow a b)))}]
    ((operations-map operation) first-num second-num)))

  (calc 2 3 "+") ; => 5
  (calc 2 3 "-") ; => -1
  (calc 2 3 "*") ; => 6
  (calc 2 3 "^") ; => 8

  ; еще немного функций для работы с хешами
  (def company
    {:name "WidgetCo"
     :address {:street "123 Main St"
               :city "Springfield"
               :state "IL"}})

  ; обратимся к вложенному хешу
  (get-in company [:address :state])
  "IL"

  ; теперь обновим вложенный хеш
  (assoc-in company [:address :street] "303 Broadway")

  ; => {:name "WidgetCo",
  ; => :address {:state "IL",
  ; =>           :city "Springfield",
  ; =>           :street "303 Broadway"}}

  (def scores {"Andrew" 100 "Angela" 200})
  (merge scores {"Kim" 150 "Ivan" 200})
  ; => {"Andrew" 100, "Angela" 200, "Kim" 150, "Ivan" 200}
  ```

instructions: |
  Создайте функцию `freq`, которая принимает коллекцию элементов и создает хеш-мапу с частотой появления элементов в коллекции. Больше подробностей в примерах.

  ```clojure
  (freq ["a" "b" "c" "a" "a" "c" "a" "d" "b"])
  ; => {"a" 4, "b" 2, "c" 2, "d" 1}

  (freq [])
  ; => {}

  (freq ["Clojure" "Ruby" "Clojure" "Elixir" "Ruby" "HTML" "JS"])
  ; => {"Clojure" 2, "Ruby" 2, "Elixir" 1, "HTML" 1, "JS" 1}

  (freq [10 10 10 20 300 41 53])
  ; => {10 3, 20 1, 300 1, 41 1, 53 1}

  (freq [:a :b :c :d :a :a])
  ; => {:a 3, :b 1, :c 1, :d 1}
  ```

tips: []
