---

name: Сортированные хеш-мапы
theory: |
  Помимо обычных хеш-мап в Clojure есть сортированные хеш-мапы, собственно, вся суть кроется в названии. Ключи в такой хеш-мапе будут отсортированы с помощью встроенной функции `compare`, поведение которой описано в ссылке, приложенной к этому уроку.
  
  Задается сортированная хеш-мапа с помощью функции `sorted-map`. Если нужно изменить порядок сортировки, то пригодится функция `sorted-map-by`. 

  Немного примеров:

  ```clojure
  (sorted-map :c 0 :a 28 :b 35)
  {:a 28, :b 35, :c 0}

  ; если ключи повторяются, то будет выбран последний
  (sorted-map :c 0 :a 28 :a 35 :c 2)
  {:a 35, :c 2}

  ; важно отметить, что ключи должны быть одинакового типа, иначе функция `compare` не сможет их сравнить
  (sorted-map :с 0 "a" 28, 2 35)
  Execution error (ClassCastException) at java.lang.String/compareTo (String.java:134).
  class clojure.lang.Keyword cannot be cast to class java.lang.String (clojure.lang.Keyword is in unnamed module of loader 'bootstrap'; java.lang.String is in module java.base of loader 'bootstrap')

  ; теперь создадим сортированную хеш-мапу с пользовательской функцией-компаратором
  (sorted-map-by > 1 "a" 2 "b" 3 "c")
  {3 "c", 2 "b", 1 "a"}
  ```

instructions: |
  Создайте функцию `to-sorted-map`, которая конвертирует обычную хеш-мапу в сортированную.

  ```clojure
  (to-sorted-map {3 :c 2 :b 1 :a})
  ; => {1 :a, 2 :b, 3 :c}

  (to-sorted-map {})
  ; => {}

  (to-sorted-map {"c" 3 "b" 2 "a" 1})
  ; => {"a" 1, "b" 2, "c" 3}

  (to-sorted-map {:c 3, :b 2, :a 1})
  ; => {:a 1, :b 2, :c 3}
  ```

tips:
  - |
    [Официальная документация](https://clojuredocs.org/clojure.core/sorted-map)
  - |
    [Функция compare, которая сортирует ключи](https://clojuredocs.org/clojure.core/compare)
  - |
    [Sorted-map-by официальная документация](https://clojuredocs.org/clojure.core/sorted-map-by)
