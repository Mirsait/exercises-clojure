---

name: Prefix notation
theory: |
  As you may have noticed, in popular programming languages, a function call looks something like `f(arg1, arg2, arg3)`, but Clojure, like other Lisp-like languages, uses prefix notation (Polish notation). This notation style may seem awkward at first sight, but with a nested call, the convenience of this approach becomes apparent (it will take some time to get used to it). For example, a nested function call for an addition, subtraction and multiplication (yes, mathematical operations are functions too!) looks like this:

  ```clojure
  (+
    1
    (- 2 3)
    (* 4 5 6)
    (+ 7 8 9 10 11 12))
  ```

  If you format the Clojure code carefully, it is easy to read, especially if the function call goes for more than two arguments. It is also worth noting that enumerating elements does not require commas, but they can be written, Clojure accepts both variants.

  ```clojure
  (+ 1 2 3)   ; => 6
  (+ 1, 2, 3) ; => 6
  ```

instructions: |
  Print the following expression to the standard output stream (using the `println` function): `1 + 10 - 2 * 7`.
tips:
  - |
    [Polish notation](https://en.wikipedia.org/wiki/Polish_notation)
  - |
    [Default Clojure code linter and formatter](https://github.com/weavejester/cljfmt)
