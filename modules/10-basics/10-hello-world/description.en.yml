---

name: Hello, World!
theory: |
  Clojure is a modern dialect of Lisp that encourages functional programming. The language uses the JVM platform. Like all Lisp-like languages, it is homoiconicity (code as data). Sometimes Clojure is called a pragmatic Lisp, because in addition to the advantages of Lisp, the language combines features of the JVM, which simplifies the creation of programs (there are even features for scripting with Clojure!). For a better understanding of the philosophy of the language, it is worth reading the report Simple Made Easy by Rich Hickey, the creator of the language.

  Traditionally, we will begin by writing a program called "Hello, World! This program will display text on the screen:
  <pre class='hexlet-basics-output'>
    Hello, World!
  </pre>

  To print something on the screen, you need to call a function (a symbolic expression). In Clojure, `(println some-str)` function is used, where `some-str` is a string enclosed in double quotes.

instructions: |
  Copy the exact code from the instructions into the editor and run it by clicking “Run”.

  ```clojure
  (println "Hello, World!")
  ```

  Note that if you type hello, woRld! instead of Hello, World!, it will count as different text, because upper and lowercase letters are different symbols in Clojure. Letter size is called case, and any programmer will tell you that case is important. This rule affects almost everything in coding, so make sure you get used to paying close attention to the case at all times.
tips:
  - |
    [Clojure official](https://clojure.org/)
  - |
    [Homoiconicity](https://en.wikipedia.org/wiki/Homoiconicity)
  - |
    [Rich Hickey, Simple Made Easy](https://www.youtube.com/watch?v=SxdOUGdseq4)
  - |
    [Babashka, Clojure scripting instrument](https://github.com/babashka/babashka)
  - |
    [S-expression](https://en.wikipedia.org/wiki/S-expression)
